
/*Monitors*/
@media(min-width:800px){
  .App {
    text-align: center;
  }
  
  /* With that approach, there will always be a spacing of at least 10 pixels regardless of the screen size. 
  But on large screens, the spacing will still be much larger than on tiny screens. */
  .Visual_UI{
    display:grid;
    grid-template-columns: 1fr;
    /* padding: calc(2px + 1vmin);     */
    margin: calc(2px + 5vmin);     
  }

  .FighterList_Wrapper{
    box-shadow:0px 3px 12px rgba(0,0,0,.3);
    border-radius:20px;
  }
  
}

/* Iphone-X */
@media (max-width:400px){
  .App {
    text-align: center;
  }

  .Visual_UI{
    display:grid;
    grid-template-columns: 1fr ;
    margin: calc(2px + 5vmin);    
  }

  .FighterList_Wrapper{
    box-shadow:0px 3px 12px rgba(0,0,0,.3);
    border-radius:20px;
  }
}

/* You can make a value (like font-size) flexible with viewport units.
Using just viewport units, that value might be too flexible, resulting in values that are too small or too big.
You can "lock" the upper and lower limits with @media queries.
You still need a fancy calculation to calculate the "middle" values between the two "locks".
The calculations can vary in complexity, especially when trying to use relative units and accommodate user font scaling. */
@media (min-width: 320px) and (max-width: 959px) {
  h1 {
    font-size: calc( 2.5rem + 16 * (100vw - 320px) / (960 - 320) );
    /* For a negative slope, we have to invert the breakpoints */
    line-height: calc( 120% + 3.2 * (100vw - 960px) / (320 - 960) );
  }
}

@media (min-width: 1024px) and (max-width: 1600px) {
  h1 {
    font-size: calc( 4.5rem + 16 * (100vw - 1024px) / (1600 - 1024) );
    /* For a negative slope, we have to invert the breakpoints */
    /* line-height: calc( 120% + 3.2 * (100vw - 1600px) / (1024 - 1600) ); */
  }
}