{"version":3,"file":"static/webpack/static/development/pages/_app.js.3cd913a6889ca1fd0407.hot-update.js","sources":["webpack:///./src/CustomMap.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { feature } from \"topojson-client\";\nimport Link from \"next/link\";\nimport JSONmap from \"./static/us-albers.json\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 480,\n  margin: \"0 auto\",\n  fontFamily: \"Roboto, sans-serif\",\n  backgroundColor: \"#7fcdff\"\n};\n\nclass CustomMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      geographyPaths: [],\n      selected:''\n    };\n    this.loadPaths = this.loadPaths.bind(this);\n  }\n  componentDidMount() {\n    this.loadPaths();\n  }\n  loadPaths() {\n    const world = JSONmap;\n    // Transform your paths with topojson however you want...\n    const countries = feature(\n      world,\n      world.objects[Object.keys(world.objects)[0]]\n    ).features;\n    this.setState({ geographyPaths: countries });\n  }\n\n  selectHandler=(stateName)=>{\n    this.setState({selected:stateName})\n  }\n  render() {\n    console.log('custommap ',this.props);\n    return (\n      <div style={wrapperStyles}>\n        <ComposableMap\n          projectionConfig={{\n            scale: 1085,\n            rotation: [0, 0, 0]\n          }}\n          width={980}\n          height={651}\n          style={{\n            width: \"100%\",\n            height: \"auto\"\n          }}\n        >\n          <ZoomableGroup center={[-47, 18]} disablePanning>\n            <Geographies\n              geography={this.state.geographyPaths}\n              disableOptimization\n            >\n              {(geographies, projection) =>\n                geographies.map((geography, i) => (\n                  <Link href={`/state?state=${geography.properties.name}`}\n                        key ={geography.properties.name}>\n                    <a>\n                  <Geography\n                    cacheId={`path-${geography.properties.ADM0_A3}-${i}`}\n                    round\n                    name={geography.properties.name}\n                    geography={geography}\n                    projection={projection}\n                    onClick={()=>this.selectHandler(geography.properties.name)}\n                    style={{\n                      default: {\n                        fill: \"#ECEFF1\",\n                        stroke: \"#607D8B\",\n                        strokeWidth: 0.75,\n                        outline: \"none\"\n                      },\n                      hover: {\n                        fill: \"#607D8B\",\n                        stroke: \"#607D8B\",\n                        strokeWidth: 0.75,\n                        outline: \"none\"\n                      },\n                      pressed: {\n                        fill: \"#FF5722\",\n                        stroke: \"#607D8B\",\n                        strokeWidth: 0.75,\n                        outline: \"none\"\n                      }\n                    }}\n                  /></a></Link>\n                ))\n              }\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    );\n  }\n}\n\nexport default CustomMap;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAFA;AAsBA;AAAA;AAAA;AACA;AACA;AAtBA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAbA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCA;AACA;AAvFA;AACA;AAwFA;;;;A","sourceRoot":""}